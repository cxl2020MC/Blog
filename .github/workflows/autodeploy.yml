name: 自动部署
'on':
  - workflow_dispatch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 检查分支
        uses: actions/checkout@v2
        with:
          ref: master
      - name: 安装 Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: 安装 Hexo
        run: |
          export TZ='Asia/Shanghai'
          npm install hexo-cli -g
      - name: 缓存 Hexo
        uses: actions/cache@v1
        id: cache
        with:
          path: node_modules
          key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}}
      - name: 安装依赖
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm install --save
      - name: 生成静态文件
        run: |
          hexo clean
          hexo generate
      - name: 部署
        run: >
          # git config --global user.name "[GithubUsername]"

          # git config --global user.email "[GithubEmail]"

          # git clone https://github.com/[GithubUsername]/[GithubBlogRepo].git
          .deploy_git

          # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患

          # =====注意.deploy_git前面有个空格=====

          # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件


    # - name: 部署
      # run: |
        git config --global user.name "cxl2020MC"
        git config --global user.email "andamu2019@163.com"
        git clone https://github.com/cxl2020MC/blog.git
        # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患
        # =====注意.deploy_git前面有个空格=====
        # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件
        hexo deploy
